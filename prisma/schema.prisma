generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
  output        = "client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                String    @id @default(uuid()) @db.Char(36)
  name              String    @db.VarChar(100)
  apiKey            String    @map("api_key") @db.VarChar(255)
  domain            String?   @db.VarChar(255)
  logoPath          String?   @map("logo_path") @db.VarChar(255)
  preferredTimezone String?   @map("preferred_timezone") @db.VarChar(100)
  currency          String?   @db.VarChar(100)
  createdAt         DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt         DateTime  @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt         DateTime? @map("deleted_at") @db.DateTime(0)

  users       User[]       @relation("UserToOrganization")
  roles       Role[]       @relation("RoleToOrganization")
  permissions Permission[] @relation("PermissionToOrganization")

  @@map("organizations")
}

model User {
  id           String    @id @default(uuid()) @db.Char(36)
  name         String    @db.VarChar(100)
  username     String    @unique @db.VarChar(100)
  email        String    @unique @db.VarChar(100)
  password     String    @db.VarChar(100)
  accessType   String    @map("access_type") @db.VarChar(100)
  organizationId   String?   @map("organization_id") @db.Char(36)
  isActive     Boolean   @default(true) @map("is_active")
  isLogged     Boolean   @default(false) @map("is_logged")
  lastLoggedAt DateTime? @map("last_logged_at") @db.DateTime(0)
  createdAt    DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt    DateTime? @map("deleted_at") @db.DateTime(0)

  organization  Organization?  @relation("UserToOrganization", fields: [organizationId], references: [id], onDelete: Cascade)
  sessions  Session[]  @relation("SessionToUser")
  userRoles UserRole[] @relation("UserRoleToUser")

  @@index([organizationId], map: "organization_id")
  @@map("users")
}

model Session {
  id                    String    @id @default(uuid()) @db.Char(36)
  accessType            String    @map("access_type") @db.VarChar(100)
  accessToken           String    @map("access_token") @db.Text
  refreshToken          String    @map("refresh_token") @db.Text
  userId                String    @map("user_id") @db.Char(36)
  refreshTokenExpiresAt DateTime  @map("refresh_token_expires_at") @db.DateTime(0)
  createdAt             DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt             DateTime? @map("deleted_at") @db.DateTime(0)

  user User @relation("SessionToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "user_id")
  @@map("sessions")
}

model Role {
  id          String    @id @default(uuid()) @db.Char(36)
  name        String    @db.VarChar(100)
  description String?   @db.Text
  organizationId  String    @map("organization_id") @db.Char(36)
  createdAt   DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt   DateTime? @map("deleted_at") @db.DateTime(0)

  organization        Organization         @relation("RoleToOrganization", fields: [organizationId], references: [id], onDelete: Cascade)
  rolePermissions RolePermission[] @relation("RolePermissionToRole")
  userRoles       UserRole[]       @relation("UserRoleToRole")

  @@index([organizationId], map: "organization_id")
  @@map("roles")
}

model Permission {
  id          String    @id @default(uuid()) @db.Char(36)
  name        String    @db.VarChar(100)
  description String?   @db.Text
  organizationId  String    @map("organization_id") @db.Char(36)
  createdAt   DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.DateTime(0)
  deletedAt   DateTime? @map("deleted_at") @db.DateTime(0)

  organization        Organization         @relation("PermissionToOrganization", fields: [organizationId], references: [id], onDelete: Cascade)
  rolePermissions RolePermission[] @relation("RolePermissionToPermission")

  @@index([organizationId], map: "organization_id")
  @@map("permissions")
}

model UserRole {
  id         String   @id @default(uuid()) @db.Char(36)
  userId     String   @map("user_id") @db.Char(36)
  roleId     String   @map("role_id") @db.Char(36)
  assignedAt DateTime @default(now()) @map("assigned_at") @db.DateTime(0)

  user User @relation("UserRoleToUser", fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation("UserRoleToRole", fields: [roleId], references: [id], onDelete: Cascade)

  @@index([userId], map: "user_id")
  @@index([roleId], map: "role_id")
  @@map("user_roles")
}

model RolePermission {
  id           String   @id @default(uuid()) @db.Char(36)
  roleId       String   @map("role_id") @db.Char(36)
  permissionId String   @map("permission_id") @db.Char(36)
  grantedAt    DateTime @default(now()) @map("granted_at") @db.DateTime(0)

  role       Role       @relation("RolePermissionToRole", fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation("RolePermissionToPermission", fields: [permissionId], references: [id], onDelete: Cascade)

  @@index([roleId], map: "role_id")
  @@index([permissionId], map: "permission_id")
  @@map("role_permissions")
}
